(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[374],{7266:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/blog/birthday-attack",function(){return n(9664)}])},9825:function(e,t,n){"use strict";var r=n(5893),o=n(7294),i=n(5697),a=n.n(i),s=n(63),c=n(5711);function h(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e){return p=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},p(e)}function d(e,t){return!t||"object"!==y(t)&&"function"!==typeof t?h(e):t}function f(e,t){return f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},f(e,t)}function b(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var y=function(e){return e&&"undefined"!==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e};function m(e){var t=function(){if("undefined"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"===typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=p(e);if(t){var o=p(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return d(this,n)}}function g(){var e=b(["\n    cursor: pointer;\n    & > :last-child::after {\n        content: '","';\n        // animation: blinker 1.2s linear infinite;\n        color: #FFF053;\n        font-family: monospace;\n        float: ",";\n        display: inline-block;\n        padding-left: 12px;\n    };\n    @keyframes blinker {\n        50% {\n            opacity: 0;\n        }\n    }\n"]);return g=function(){return e},e}function x(){var e=b(["\n  margin: ",";\n"]);return x=function(){return e},e}var j=s.ZP.div(g(),(function(e){return!0===e.collapsed?e.style.collapsedAccordion:e.style.expandedAccordion}),(function(e){return e.style.accordionPosition})),w=(0,s.ZP)(c.S$)(x(),(function(e){return e.style&&e.style.margin?e.style.margin:"inherit"})),v=function(e){!function(e,t){if("function"!==typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}(a,e);var t,n,o,i=m(a);function a(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),u(h(t=i.call(this,e)),"toggleDetailView",(function(){t.setState((function(e){return{collapsed:!e.collapsed}}))}));var n=e.collapsed;return t.state={collapsed:n},t}return t=a,(n=[{key:"render",value:function(){var e=this,t=this.props,n=t.header,o=t.body,i=t.style.global,a=void 0===i?{}:i,s=this.state.collapsed;return(0,r.jsxs)(w,{style:a,children:[(0,r.jsx)(j,{onClick:function(){return e.toggleDetailView()},collapsed:s,style:a,children:n}),!s&&o]})}}])&&l(t.prototype,n),o&&l(t,o),a}(o.PureComponent);u(v,"propTypes",{header:a().object.isRequired,body:a().object.isRequired,collapsed:a().bool,style:a().shape({})}),u(v,"defaultProps",{collapsed:!0,style:{global:{collapsedAccordion:"\u258c",expandedAccordion:"",accordionPosition:null}}}),t.Z=v},9664:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return m}});var r=n(5893),o=(n(7294),n(9008)),i=n(9832),a=n(9825),s=n(6741),c=n(5225),h=n(5711);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var u=function(e,t,n){window.katex&&t&&window.katex.render(e,t,function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"===typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){l(e,t,n[t])}))}return e}({},n,{throwOnError:!0}))},p=n(7354),d=function(e,t){return u(e,t,{displayMode:!0})},f=function(e,t){return u(e,t,{displayMode:!1})},b=(0,r.jsxs)(p.pP,{children:["n1-n2,n1-n3\u2026,n1-n23 [22 comparison]",(0,r.jsx)("br",{}),"+ n2-n3,n2-n3,...,n2-n23 [21 comparison]",(0,r.jsx)("br",{}),"+ n3-n4,...,n3-n23 [20 comparison]",(0,r.jsx)("br",{}),"+ ...",(0,r.jsx)("br",{}),"+ n22-n23 [1 comparison]",(0,r.jsx)("hr",{}),"= 253 comparison"]}),y=(0,r.jsxs)(p.pP,{children:["The probability of not sharing a birthday in a room of 23 people comes out to be,",(0,r.jsx)("div",{ref:function(e){return d("(365/365) * (364/365) * (363/365) * (362/365) \u2026\u2026 * (342/365) \\sim 0.49",e)}}),"Hence, the probability of sharing a birthday in a room of 23 people.",(0,r.jsx)("div",{ref:function(e){return d("1 - 0.49 = 0.51",e)}}),(0,r.jsx)("div",{ref:function(e){return d("1 - \\frac{365!}{(365-n)! * (365^n)} = 0.51",e)}}),(0,r.jsx)("div",{ref:function(e){return d("\\approx 50\\%",e)}}),(0,r.jsx)("hr",{}),(0,r.jsx)("div",{ref:function(e){return d("p_M(n) = 1 - \\frac{M!}{(M-n)!M^n}",e)}})]});var m=function(){return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(o.default,{children:[(0,r.jsx)("link",{rel:"stylesheet",href:"https://cdn.jsdelivr.net/npm/katex@0.15.3/dist/katex.min.css",integrity:"sha384-KiWOvVjnN8qwAZbuQyWDIbfCLFhLXNETzBQjA/92pIowpC0d2O3nppDGQVgwd2nB",crossOrigin:"anonymous"}),(0,r.jsx)("script",{defer:!0,src:"https://cdn.jsdelivr.net/npm/katex@0.15.3/dist/katex.min.js",integrity:"sha384-0fdwu/T/EQMsQlrHCCHoH10pkPLlKA1jL5dFyUOvB3lfeT2540/2g6YgSi2BL14p",crossOrigin:"anonymous"}),(0,r.jsx)("script",{defer:!0,src:"https://cdn.jsdelivr.net/npm/katex@0.15.3/dist/contrib/auto-render.min.js",integrity:"sha384-+XBljXPPiv+OzfbB3cVmLHf4hdUFHlWNZN5spNQ7rmHTXpd7WvJum6fIACpNNfIR",crossOrigin:"anonymous",onLoad:"renderMathInElement(document.body);"}),(0,r.jsx)("style",{children:" .katex-display > .katex { text-align: left; overflow: auto hidden;} "})]}),(0,r.jsx)(c.Z,{children:(0,r.jsx)(h.PU,{children:(0,r.jsxs)(i.XF,{children:[(0,r.jsx)(s.Z,{title:"Birthday Attack"}),(0,r.jsx)(i.Z0,{}),"A Birthday Attack is a brute force cryptographic attack which exploits the possibility of a hash collision. This exploit cracks the mathematics behind the birthday paradox through which the chance of sharing one birthday by two people is quite higher than one may think.",(0,r.jsx)(i.U7,{children:"The Birthday Paradox"}),'Suppose if there are "n" number of people in a room, there is a probability that some of them might have their birthdays on a similar day. Intuitively this probability might seem small. But, actually its about 50% (r1) chance that two people might share the same birthday in a room of 23 people (n=23) and this reaches 99.9% (r2) if the number of people in room are 75 (n=75).',(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),'One important point to consider here is that we don"t care which two people share a birthday. To arrive at this 50% (r1) probability of a birthday match in a room of 23 people we form 253 pairs/comparisons.',(0,r.jsx)("br",{}),(0,r.jsx)(a.Z,{header:(0,r.jsx)("p",{children:"Comparisons Derivation"}),body:b,collapsed:!0,style:{global:{margin:"1em 0 0 0 !important",collapsedAccordion:"+",expandedAccordion:"-",accordionPosition:"right"}}}),"Whereas, if we did consider which person share a birthday i.e we fix a person/birthday and search for a person with similar birthday then we would need 253 people (n=253) to get same number of pairs/comparisons and arrive at same 50% (r3) probability.",(0,r.jsx)(i.U7,{children:"Maths behind The Birthday Paradox"}),"According to the pigeonhole principle, if n items are put into m containers, with n>m, then at least one container must contain more than one item.",(0,r.jsx)("br",{}),"In relation to the birthday paradox, the pigeonhole principle can be used to intuitively see that as the number of people grow larger (or approach 367), at least 2 people will have to be assigned to a certain \u201cbox\u201d (birthday) since there are only 366 possible birthdays, resulting in people having the same birthday.",(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),"Note: To simplify the calculation we will not consider leap year and assume every birthday has an equal occurrence chance.",(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),"Instead of calculating the chance of two people sharing a birthday in a room we calculate the opposite i.e chances of two people not sharing a birthday. By this approach, the first person can have any birthday so 365/365 chance, for second person not to share a birthday its 364/365 (excluding the birthday of the first person), for third is 363/365 \u2026 so on.",(0,r.jsx)(a.Z,{header:(0,r.jsx)("p",{children:"Equation Derivation"}),body:y,collapsed:!0,style:{global:{margin:"1em 0 0 0 !important",collapsedAccordion:"+",expandedAccordion:"-",accordionPosition:"right"}}}),"It turns out that \xa0",(0,r.jsx)("span",{ref:function(e){return f("p_M(n) = 0.5",e)}}),"\xa0 when n is on the order of \xa0",(0,r.jsx)("span",{ref:function(e){return f("\\sqrt M",e)}}),"\xa0.",(0,r.jsx)("br",{}),"Suppose, we have a hash algo which gives a output of 64-bit. Total hashes possible would be \xa0",(0,r.jsx)("span",{ref:function(e){return f("2^{64}",e)}}),"\xa0 i.e ",(0,r.jsx)("span",{ref:function(e){return f("M = 2^{64}",e)}}),". This means, we have a 50% chance of collision after only",(0,r.jsx)("span",{ref:function(e){return f("2^{32}",e)}})," tries.",(0,r.jsx)("br",{}),"For a 128 bit digest, this requires ",(0,r.jsx)("span",{ref:function(e){return f("2^{64}",e)}}),"\xa0 (",(0,r.jsx)("span",{ref:function(e){return f("\\sim 10^9",e)}}),")\xa0 tries. (That is computationally infeasible)",(0,r.jsx)(i.U7,{children:"Birthday Paradox exploitation in hashing"}),"Hash function is a versatile one-way* cryptographic algorithm that maps an input (message) of any size to a unique output of a fixed length of bits (message digest).",(0,r.jsx)(p.pP,{children:(0,r.jsxs)("code",{children:["def hash_it(input: int):",(0,r.jsx)("br",{}),"\xa0\xa0return input % 1024",(0,r.jsx)("br",{})]})}),"Our simple hashing approach would take the modular of the integer passed and return a output of a fixed range (0\u20131023). Our hash function does not map our passed params to unique indexes. This anomaly of a hash function is known as a hash collision.",(0,r.jsx)("br",{}),'According to the Pigeonhole Principle, it is impossible to avoid hash collisions, unless the size of the output is at least as large as the input (which defeat"s the purpose of a hash function).',(0,r.jsx)("br",{}),(0,r.jsx)(i.U7,{children:"Exploitation in action"}),'Suppose "A" wants to share a document with "B".\xa0\xa0"A" signs the document by n-bit hash code.',(0,r.jsx)("br",{}),'Now,\xa0\xa0evil "C" can generate ',(0,r.jsx)("span",{ref:function(e){return f("2^{n}",e)}}),"versions of the document (appending space, blank line, etc to output different hash but still maintaining the document visually alike to the original), generate\xa0",(0,r.jsx)("span",{ref:function(e){return f("2^{n}",e)}})," versions of the evil document, and see which pair hashes to the same value.",(0,r.jsx)("br",{}),"The probability that there is a benign document and an evil document with the same hash is greater>0.5 i.e\xa0",(0,r.jsx)("span",{ref:function(e){return f("O(\\sqrt N)",e)}}),". If no match found, additional valid and fraudulent document are generated until a match is made.",(0,r.jsx)("br",{}),'"C" then presents the benign document for "B" to agree to, and now he has the evil document with the same signature. This attack is called a "collision attack"; as the attacker is looking for a "collision".',(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),'On the other hand, if "C" has no control over the good document, this doesn"t work. He can, of course, create \ud835\udc41 evil documents and see if there is one with the same hash as the good one, however the probability  of that happening is significantly smaller if \ud835\udc41 is large it goes upto \xa0',(0,r.jsx)("span",{ref:function(e){return f("O(N)",e)}}),'. This attack is called a "second preimage attack", that is, find a second message that hashes to the same value as a given one. If the source document is already fixed then we can do a pre-image attack where we try to find a message that has a specific hash value.']})})})]})}}},function(e){e.O(0,[115,37,774,888,179],(function(){return t=7266,e(e.s=t);var t}));var t=e.O();_N_E=t}]);