{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport React from \"react\";\nimport { LiWrapper, Span } from \"./webcomps\";\nimport { SectionContainer } from \"./wrappers\";\nimport PropTypes from \"prop-types\";\nimport styled from 'styled-components';\nimport SectionTitle from \"./sectionTitle\";\nvar StyleLink = styled.a.withConfig({\n  displayName: \"taskList__StyleLink\",\n  componentId: \"ksnv82-0\"\n})([\"text-decoration:none;\"]);\n\nvar TaskList = function TaskList(props) {\n  var listHeader = props.listHeader,\n      taskList = props.taskList;\n  var updatedTaskList = taskList.map(function (task) {\n    return _objectSpread({}, task, {\n      title: task.title.split(task.hightLight)\n    });\n  });\n  return React.createElement(SectionContainer, null, React.createElement(SectionTitle, {\n    title: listHeader\n  }), React.createElement(\"ul\", null, updatedTaskList.map(function (item) {\n    return React.createElement(LiWrapper, {\n      key: item.hexCode\n    }, React.createElement(Span, null, item.title[0]), React.createElement(StyleLink, {\n      href: item.link\n    }, React.createElement(Span, {\n      color: item.hexCode\n    }, item.hightLight)), React.createElement(Span, null, item.title[1]));\n  })));\n};\n\nTaskList.propTypes = {\n  listHeader: PropTypes.string.isRequired,\n  taskList: PropTypes.arrayOf(PropTypes.object).isRequired\n};\nexport default TaskList;","map":{"version":3,"sources":["/root/webprojects/portfolio/components/taskList.js"],"names":["React","LiWrapper","Span","SectionContainer","PropTypes","styled","SectionTitle","StyleLink","a","TaskList","props","listHeader","taskList","updatedTaskList","map","task","title","split","hightLight","item","hexCode","link","propTypes","string","isRequired","arrayOf","object"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,IAApB,QAAgC,YAAhC;AACA,SAASC,gBAAT,QAAiC,YAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,IAAMC,SAAS,GAAGF,MAAM,CAACG,CAAV;AAAA;AAAA;AAAA,6BAAf;;AAIA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAW;AAAA,MAClBC,UADkB,GACOD,KADP,CAClBC,UADkB;AAAA,MACNC,QADM,GACOF,KADP,CACNE,QADM;AAE1B,MAAMC,eAAe,GAAGD,QAAQ,CAACE,GAAT,CAAa,UAAAC,IAAI;AAAA,6BAASA,IAAT;AAAeC,MAAAA,KAAK,EAAGD,IAAI,CAACC,KAAL,CAAWC,KAAX,CAAiBF,IAAI,CAACG,UAAtB;AAAvB;AAAA,GAAjB,CAAxB;AACA,SACE,oBAAC,gBAAD,QACE,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAEP;AAArB,IADF,EAEE,gCACGE,eAAe,CAACC,GAAhB,CAAoB,UAAAK,IAAI;AAAA,WACvB,oBAAC,SAAD;AAAW,MAAA,GAAG,EAAEA,IAAI,CAACC;AAArB,OACE,oBAAC,IAAD,QAAOD,IAAI,CAACH,KAAL,CAAW,CAAX,CAAP,CADF,EAEE,oBAAC,SAAD;AAAW,MAAA,IAAI,EAAEG,IAAI,CAACE;AAAtB,OACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAEF,IAAI,CAACC;AAAlB,OAA4BD,IAAI,CAACD,UAAjC,CADF,CAFF,EAKE,oBAAC,IAAD,QAAOC,IAAI,CAACH,KAAL,CAAW,CAAX,CAAP,CALF,CADuB;AAAA,GAAxB,CADH,CAFF,CADF;AAgBD,CAnBD;;AAqBAP,QAAQ,CAACa,SAAT,GAAqB;AACjBX,EAAAA,UAAU,EAAEP,SAAS,CAACmB,MAAV,CAAiBC,UADZ;AAEjBZ,EAAAA,QAAQ,EAAER,SAAS,CAACqB,OAAV,CAAkBrB,SAAS,CAACsB,MAA5B,EAAoCF;AAF7B,CAArB;AAKA,eAAef,QAAf","sourcesContent":["import React from \"react\";\nimport { LiWrapper, Span } from \"./webcomps\";\nimport { SectionContainer } from \"./wrappers\";\nimport PropTypes from \"prop-types\";\nimport styled from 'styled-components';\n\nimport SectionTitle from \"./sectionTitle\";\n\nconst StyleLink = styled.a`\n    text-decoration: none;\n`;\n\nconst TaskList = (props) => {\n  const { listHeader, taskList } = props;\n  const updatedTaskList = taskList.map(task => ({...task, title : task.title.split(task.hightLight)}));\n  return(\n    <SectionContainer>\n      <SectionTitle title={listHeader}/>\n      <ul>\n        {updatedTaskList.map(item => (\n          <LiWrapper key={item.hexCode}>\n            <Span>{item.title[0]}</Span>\n            <StyleLink href={item.link}>\n              <Span color={item.hexCode}>{item.hightLight}</Span>\n            </StyleLink>\n            <Span>{item.title[1]}</Span>\n          </LiWrapper>\n        ))}\n      </ul>\n    </SectionContainer>\n  );\n};\n\nTaskList.propTypes = {\n    listHeader: PropTypes.string.isRequired,\n    taskList: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default TaskList;\n"]},"metadata":{},"sourceType":"module"}